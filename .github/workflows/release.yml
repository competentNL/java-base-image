name: Release application

on:
  push:
    branches:
      - 'main'
  schedule:
    - cron: '0 0 * * 5'  # This runs the pipeline every Friday at 00:00

env:
  REGISTRY: ghcr.io

jobs:
  deploy:
    name: Publish to github registry
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: repo name to lowercase
        id: repository_owner
        uses: ASzc/change-string-case-action@v6
        with:
          string: ${{ github.repository }}

      - name: Set derived environment variable
        run: echo "IMAGE_NAME=$REGISTRY/${{ steps.repository_owner.outputs.lowercase }}" >> $GITHUB_ENV

      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker image
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=tag
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha
            type=raw,latest
            type=raw,value={{date 'YYYYMMDD-HHmm'}}
            type=edge

      - name: Build Docker image
        id: build
        uses: docker/build-push-action@v6
        with:
          context: .
          push: false
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

      - name: Flatten into single layer
        run: |
          # Install jq for JSON parsing
          sudo apt-get update && sudo apt-get install -y jq

          # Get image ID of the built image
          IMAGE_ID=$(docker images --filter "reference=${{ env.IMAGE_NAME }}" --format "{{.ID}}" | head -1)

          # Extract labels and metadata from original image
          JSON_LABELS=$(docker inspect $IMAGE_ID | jq -r '.[0].Config.Labels')
          LABEL_ARGS=$(echo $JSON_LABELS | jq -r 'to_entries[] | "--change LABEL=\(.key)=\(.value)"' | tr '\n' ' ')

          # Export/import to flatten layers
          docker create --name temp-container $IMAGE_ID
          docker export temp-container -o app.tar
          docker import \
            $LABEL_ARGS \
            --change "USER 1001" \
            --change "ENV TZ=Europe/Amsterdam" \
            --change "LABEL owner=UWV" \
            --change "LABEL tbd-required-label=tbd-required-value" \
            app.tar ${{ env.IMAGE_NAME }}:single-layer